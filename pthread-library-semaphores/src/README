pthread_join: 
First i made a temparary variable that looks for the thread that the calling
thread is trying to join to. Then set the status of the calling thread as blocked and store 
the thread that the calling thread is waiting for. I then called schedule and in schedule i have a 
helper function check the status of the waiting thread, if a thread does not have a waiting thread its
wait_thread variable will be -1 (this is done so that only callings threads will be checked). If the status 
of the waiting thread is EXITED, the status of the calling thread is changed to READY.

sem_init:
Initialize a new semaphore struct that stores the value of the semaphore, the head to a queue that holds
waiting threads that have tried to call sem wait but got blocked, and a flag to indicate a initialized semaphore.

sem_wait:
First check if the semaphore value is greater then 0, if it is then decrement the value and return 
immediatly. If the semaphore value is 0, then check if the head of the wait queue (wq_head) is NULL, if
so store the first thread id in the queue. If its not NULL, traverse the queue and store the thread id 
at the end, and set the current thread state to SEM_WAIT state in which the scheduler will ignore it.

sem_post:
If the wq_head is not NULL, set the status of the thread that is on the top of the list to READY, and 
make wq_head the next item in the list. Increment the semaphore value.