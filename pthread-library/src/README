Created a mini circular linked list library with create_tcb, and add_to_queue (Implementation 
from https://www.tutorialspoint.com/data_structures_algorithms/doubly_linked_list_algorithm.htm). 
The create_tcb function creates a new thread control block and stores the information in a struct called tcb.
This tcb struct is part of a larger struct called thread_t which holds the stack ptr and the next 
node in the ll in addition to the tcb.

add_to_queue adds the given node (thread_t) into the end of the circular ll and returns the new head.

In pthread_create it first checks if this is the first time creating a thread and moves to the setup_threads
function which sets up the main thread. The main thread is the currently executing process and thus does not
need a custom stack, so the only thing needed is to use setjmp. After we set up the SIGALRM which goes off 
every 50ms and set schedule as the handler. Implementation of SIGALRM from 
https://stackoverflow.com/questions/31919247/c-signal-handler 

Subsequent process are set up in pthread_create.

The stack of the process in created with malloc which returns the pointer to the beginning of the stack.
But since the stack grows down we need to add 32767 (Stack size) to the pointer to get to the top, and 
subtract 8 (calling convention).

                                        ----------- 0xfffff
new_thread->stack_ptr + STACK_SZ - 8 -> -----------    |
                                            .       STACK_SZ
                                            .          |
                                            .          |
               new_thread->stack_ptr -> ----------- 0x00000

After that, to the location of the stack ptr we insert the address of pthread_exit which gets popped into 
RIP as the next instruction.

**** I was stuck on the stack part for a while because i forgot the stack grows from top to bottom 
and drawing a stack diagram after some research helped ****

According to the instructions we add the stack_ptr to RSP and start_thunk into PC (after casting to unsigned long
and mangling it). Also we add arg into R13 and start_routine into R12.

The scedule section first checks in setjmp is 0 to make sure its the first time calling setjmp.
it enters a do while loop which goes to the next process that has not exited and longjmps to it.